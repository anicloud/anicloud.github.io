<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[推荐的一天的工作流程]]></title>
      <url>http://anicloud.github.io/2016/10/20/how-to-do-work-for-a-day/</url>
      <content type="text"><![CDATA[推荐的一天的工作流程 每天早上各团队用10分钟开个短会.会议中共享前一天的进度和当天的计划 会议中确定任务的负责人.各成员在会议之后立即开始实现自己的任务 实现过程中尽量书写测试用例。并记录下来 编写完功能，测试完之后，提交代码到版本管理系统的分支 请求团队其他工程师进行代码审核，审核人需要对代码负责。发现问题修改后，测试完更新到代码分支 合并代码到主分支，在测试环境进行黑盒测试 满足要求后，到产品重大更新时，更新线上产品版本]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ani.Cloud Ani-Agent Document]]></title>
      <url>http://anicloud.github.io/2016/10/18/anicloud-ani-agent-dcoument/</url>
      <content type="text"><![CDATA[概述Ani-Agent模块是为第三方开发者提供的SDK。该模块封装了Service-Bus对外提供的开放接口的常用服务。利用该模块，开发者可以方便的进行第三方服务的注册、用户用户组管理、基于OAuth2.0授信、设备对象信息获取以及对象Stub调用等功能。 模块列表用户用户组 该模块提供对用户用户组的基本操作。包括用户的注册、修改；以及用户组的添加、删除、关联等操作。 第三方服务注册 该模块提供第三方服务的注册功能。开发者能够提供该模块在Anicloud 平台注册自己的应用（服务）。平台会为该应用颁发唯一的ID以及client_secret。 设备对象（DeviceObj）信息获取 该模块提供对DeviceObj的信息查询功能。通过用户授信的第三方应用可以利用该接口获取用户的设备状态信息、设备Stub 列表信息等。 基于OAuth2.0 的授信 该模块提供对OAuth2.0 协议的流程封装，提供该模块可以方便地进行access_token的获取以及token的刷新操作。该模块提供了对Authorization Code、Password、Implicit三种授信模式的支持。 对象Stub调用 该模块提供了对象Stub调用的接口AniInvokable。对Stub的调用提供了同步和异步两种方式。异步的调用需要开发者实现消息结果解析的观察者接口MessageObserver，利用该接口来处理异步调用的结果。同时也提供了平台对应用的反向调用接口ClientInvokable，该接口需要由应用的开发者实现。 设计实现技术选择 协议WebSocket、Http、OAuth2.0 设计模式：观察者、工厂、单例 Spring RestTemplate 提供对Http 接口的访问 系统配置anicel_meta.properties 文件是Servuce-Agent的核心配置文件。主要包括ServiceBus的各类资源地址。当ServiceBus的地址发生改变时，可以对该文件进行编辑。 核心类 AnicelMeta 提供对anicel_meta.properties 文件的读取操作，并作为Service-Agent的核心配置类存在。Http和Websocket的实现都依赖于该类。 DomainObjectValidator 提供对Bean Valication的实现。采用的是Hibernate Validation 实现。 AccountObject 该类提供对用户状态的维护功能，同时第三方应用通过该类，为用户对象绑定Stub列表。以便实现对用户Stub的调用。 核心业务类 AccountService 该接口提供对用户的基本操作。需要注意的是注册用户时，不需要提供token。 register(AccountRegisterDto account) modify(AccountModifyDto account) getByAccountId(Long accountId) getByEmail(String email) getByPhoneNumber(String phoneNumber) getByAccessToken() addAccountInGroup(Long accountId, Long groupId) 添加用户到用户组 AccountGroupService 该接口提供对用组的基本操作。 save(GroupFormDto accountGroup) modify(GroupFormDto accountGroup) remove(Long accountId, Long groupId) getByAccountAndGroupType(Long accountId, GroupType groupType) getAccountsInGroup(Long groupId) AniServiceManager 该接口提供第三方开发者注册应用的操作。注册应用时不需要提供token。 register(AniServiceRegisterDto registerDto) getByAniService(String aniServiceId, String clientSecret) DeviceObjService 该接口提供对设备对象的获取操作。 getDeviceObjInfo(Long accountId, boolean withSlave) getDeviceObjInfo(Long accountId, Long mainObjId, boolean withSlave) AniOAuthService 该接口实现了OAuth2.0 的相关流程。 getOAuth2AccessToken(String code, AuthorizationCodeParameter authorizationCodeParameter) getOAuth2AccessToken(PasswordParameter passwordParameter) getOAuth2AccessToken(ImplicitParameter implicitParameter) 暂未实现 refreshAccessToken(String refreshToken, AuthorizationCodeParameter authorizationCodeParameter) AccountInvoker 该接口是第三方应用维护用户对象状态（AccoutObject）的接口。Anicloud 平台需要维护Account-App-ServiceBus的状态信息。需要第三方应用在适当的地方调用该接口的实现类，向平台汇报用户状态。 registerAndLogin(AccountObject accountObject) login(AccountObject accountObject) logout(AccountObject accountObject) remove(AccountObject accountObject) updateAccountObjectStubList(AccountObject accountObject) AniInvokable 该接口提供对对象Stub的同步和异步调用。当调用为异步调用时，需要注册实现MessageObserver接口的消息处理观察者到WebsocketClient 对象中。 invokeAniObjectAsyn(AniStub stub) invokeAniObjectSync(AniStub stub) ClientInvokable 该接口是为实现平台对应用的调用而设计的。需要第三方开发者显示地实现该接口，并注入到WeboSocketClient 中。 invokeAniObjectSync(AniStub stub) sessionOnClose(String sessionId, CloseReason closeReason) session监听接口 sessionOnError(String sessionId, Throwable throwable) session监听接口 AgentTemplate 该接口是对Service-Agent提供的基于Http协议的业务类的单例封装模板类。利用该模板类可以方便地在应用全局以单例的方式实现对AccountService、AccountGroupService、ServiceManager、DeviceObjService和AniOAuthService的构造。 外部接口 MessageObserver 该接口是当对对象Stub异步调用结果的获取及处理时需要实现并注入到WebSocketClient中的。需要由第三方开发者实现。 void update(MessageObservable o, Object arg) 开发者文档Service-Agent的使用都在核心类的上部利用javadoc进行了标注。具体的使用请参ServiceAgent文档地址。 部署要求 JDK 1.7 以上 Hibernate Valication 包 Spring RestTeplate 包 anicel-commons 包 参考 Spring Document Hibernate Validation OAuth2.0 规范]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ani.Cloud Service-Bus Document]]></title>
      <url>http://anicloud.github.io/2016/10/18/anicloud-service-bus-document/</url>
      <content type="text"><![CDATA[概述ServiceBus 为Octopus 核心提供对外的应用（服务）接入，以及基于OAuth2.0 的用户资源授信功能。是Anicloud 平台实现Device-to-Device，Service-to-Service 和Service-to-Device 的枢纽。 ServiceBus 对外提供平台用户资源、设备访问控制、对象状态管理、消息推送等核心功能。ServiceBus 的开放接口主要基于http 和WebSocket 协议。基于Http 协议的接口主要包括用户的资源、用户组资源、第三方服务注册、设备资源等。基于WebSocket 的开放接口主要实现Stub 的访问控制，对象状态维护等功能。 模块列表用户用户组模块 用户(Account)用户组(AccountGroup)模块提供用户的注册、基本信息修改以及用户组管理等功能。通过该模块可以实现基于用户组的授权功能，添加到目标用户所拥有的用户组的成员能够访问对应用户的资源（需要Octopus 提供支撑）。基于用户的多种信息进行查询。 第三方服务注册模块 第三方服务(AniService)模块提供第三方开发者在Anicloud 平台注册开发的应用的基本信息。经过平台验证后，第三方服务应用（或服务）便可以基于OAuth2.0 协议取得用户的授权(Token)，通过ServiceBus 提供的开放接口获取用户在平台上的资源。 第三方服务注册后，由平台办法唯一的ClientId 识别码。作为基于OAuth2.0 授信时的依据。 设备信息获取模块 设备信息获取模块提供对设备基本信息以及设备状态信息的获取功能。通过该模块第三方应用（或服务）可以获取对用户设备进行操作的Stub 列表，以及设备的状态信息。 基于OAuth2.0 的第三方应用授权 ServiceBus 采用OAuth2.0 协议对用户的资源进行授权。基于Spring Security 和 Spring OAuth2.0 实现了对Authorization_Code，Implicit，Password 三种授权模式的支持。 设计实现技术选择 http，WebSocket，Jms Spring Framework，SpringMVC，Spring Security，Spring OAuth2.0 Hibernate JPA，MySQL，Redis，ActiveMQ Maven，IDEA 系统设计系统采用领域驱动（DDD）的设计方法。Spring 的注解@Configurable 提供了对领域层对象的注入需求，来实现对领域对象的装配。ServiceBus 分为Service-Bus模块和Service-Core模块。Service-Core 提供Bus内的核心业务，包括数据的持久化、与Octopus 系统的通信等。Service-Bus提供Bus对外的所有开放接口。从代码的组织结构上看分为： interfaces 接口层与外部系统通信 application 应用层，提供系统内的业务组装 domain 领域对方层，系统的核心功能 infrastructure 基础设施层，提供数据持久化，消息等功能 领域对象设计 AniSerAccountObj 记录用户、应用以及会话之间的状态。ServiceBus 的分布式部署特性，需要记录每一个第三方服务连接上Bus 的Session，以及通过该Session 与平台通信的Account 的状态。objectId 与 token 由Octopus 生成，是实现Bus-to-Octopus 安全访问的基础。 AniServiceDetails 记录第三方应用在平台注册的基本信息。需要记录该应用的注册人信息(AccountId)。aniServiceId 与 clientSecret 字段由Bus 生成，作为第三方服务的识别码。同时该对象实现org.springframework.security.oauth2.provider.ClientDetails 接口。 AniService 直接继承AniServiceDetails 类。作为Bus 上记录第三方服务的对象。 AniServiceInfo 记录AniService 的非核信息，也为以后扩展AniService 信息的类。 AniServiceEntrance 记录第三方服务的入口，即配置一个应用或服务的多个访问点。 核心对外接口 基于http 协议的开放接口设计 ServiceBus 采用SpringMVC 实现http 接口的发布，主要包括核心类： AccountController，AccountGroupController AniServiceController DeviceObjController 基于WebSocket 设计的开放接口设计 WebSocketServer 系统采用WebSocket 实现与第三方服务的全双工通信。WebSocket 通道主要实现对Object 的Stub 的同步/异步访问，Object的状态维护，消息的推送等功能。 核心业务类 AniServiceManagerFacade 第三方服务核心业务类 getByAniServiceId(String aniServiceId) saveOrUpdate(AniServiceDto aniServiceDto) save(AniServiceDto aniServiceDto) modify(AniServiceDto aniServiceDto) removeByAniServiceId(String aniServiceId) addAniServiceEntrance(String aniServiceId, AniServiceEntranceDto serviceEntranceDto) addAniServiceEntrance(String aniServiceId, AniServiceEntranceDto serviceEntranceDto) AniSerAccountObjManager 应用、用户和会话状态维护核心类 registerAndLogin(AccountObject accountObject, String aniServiceId, String sessionId) login(AccountObject accountObject, String aniServiceId, String sessionId) remove(AccountObject accountObject, String aniServiceId, String sessionId) updateStubList(AccountObject accountObject, String aniServiceId, String sessionId) updateSessionRelatedAccountObjectState(String sessionId) invokeObjectStub(AniStub aniStub, String aniServiceId, String sessionId) Object的Stub调用 AniSerAccountObjServiceFacade AniSerAccountObj的增、删、改、查等基本操作类。 CachedAniSerAccountObjServiceFacade 提供AniSerAccountObj 的缓存操作的类，采用装饰器模式 包装了AniSerAccountObjServiceFacade 接口。 DeviceObjInfoServiceFacade 提供对DeviceObj 的查询服务。 外部接口ServiceBus 通过antenna模块封装的接口跟Octopus 核心通信。因此，需要实现antenna 的回调接口ObjectInvokeListener和ObjectMessageListener。 ObjectInvokeHandler 实现ObjectInvokeListener 接口，提供对Object 的Stub 的调用。 ObjectMessageHandler 实现ObjectMessageListener 的接口，提供消息的接收功能。 开发者文档ServiceBus 提供了客户端SDK 开发者工具包，帮助第三方开发者快速地利用Anicloud 平台进行开发。详细参见 Service-Agent 开发者文档。 部署要求 由于Spring 采用AOP 的方式实现DDD，为了让程序的war 包能够顺利发布到Tomcat 容器中，需要设置对应的环境变量。在tomcat 的bin 目录下的setenv.sh 文件中添加如下配置。如下图所示。 tomcat 默认只支持50MB大小的文件上传，如果war 包过大需要修改tomcat 的配置文件。具体可网络搜索。 引用参考 Spring Document Spring Security OAuth2.0 规范]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ani.Cloud Earth Document]]></title>
      <url>http://anicloud.github.io/2016/10/18/anicloud-earth-document/</url>
      <content type="text"><![CDATA[概述Earth模块是提供整个Anicloud 平台的基础用户账号管理模块。该模块定义了系统用户的基本信息、用户类别，同时该模块还定义了用户组等概念。为了实现对OAuth2.0 的支持，系统还扩展了对OAuth2.0必备的信息的存储。通过用户组的概念定义了用户资源的访问权限。该模块还提供了用户联系人的概念，并在底层给予支持。系统对用户的密码采用BCrypt加密算法进行加密，该问题在集成Ani-CAS系统时需要考虑。 功能列表用户用户组 用户用户组提供了对用户的基本管理功能。系统将用户分为个人用户、企业用户和ROOT用户。ROOT用户为系统的超级用户，负责创建系统用户组。系统默认会将每一个注册的用户添加到默认的用户组中。 用户联系人列表 用户联系人提供用户对自己的联系人进行管理的功能。用户的联系人列表是用户对跟自己经常产生关系的其他用户的集合。 设计实现技术选择 Spring framework Spring framework Security Hibernate JPA Redis Cache BCrypt 加密 MySQL 系统设计模块划分 Account-Manager模块 该模块包括系统的核心业务，数据持久化等。 Ostopus-Service模块 提供Account-Manager模块的发布部署操作，包括对外基于Http的接口发布。基于RMI的业务接口发布等。 设计该模块采用基于DDD的领域驱动设计。由Spring的Configuralbe接口提供技术支持。 核心业务类 AccountService 提供对用户的基本操作。包括为用户关联用户组。 AccountGroupService 提供对用户组的基本操作。 AccountContantService 提供对用户联系人列表的基本操作。 GroupJoinInvitationService 提供对用户关联用户组的消息管理功能。 对外接口 AccountServiceFacade 提供对用户管理的门面封装，最终通过RMI方式对外暴漏。 AccountGroupServiceFacade 提供对用户组管理的门面封装，最终通过RMI方式对外暴漏。 AccountContactServiceFacade 提供对用户联系人列表的操作功能的封装。 GroupJoinInvitationServiceFacade 提供对关联用户组操作消息的封装。 CachedAccountServiceFacadeImpl 提供对用户基本信息读取的基于Redis的缓存封装，采用装饰者模式实现。 外部接口Earth模块对外暴漏的接口，其他子系统都将通过Octopus-Antenna模块进行访问。 部署要求部署要求参见Service-Bus的部署要求。ServiceBus部署要求。 引用 Spring Document Spring Security OAuth2.0 规范]]></content>
    </entry>

    
  
  
</search>
